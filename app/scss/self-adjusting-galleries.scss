@import "scaffold";

$susy: (
  container: 1140px, 
  columns: 12, 
  gutters: 0.5, 
  global-box-sizing: border-box, 
  debug: (image: show-columns)
  );

@include border-box-sizing;

// Susy Layouts
// ------------

.wrap {
  @include container;
}

// Gallery
// -------

.gallery {
  @include cf;
  .gallery__item {
    @include gallery(3);
    margin-bottom: gutter();
    height: 0;
    padding-bottom: span(3);
  }
}

.self-adjusting-galleries {
  @include cf;
}

// Gallery--adjusted 
// -----------------

$cols: 4;

.gallery--adjusted {
  @include cf;
  .gallery__item {
    @include gallery(3);
    height: 0;
    margin-bottom: gutter();
    padding-bottom: span(3);
  }

  // Manually adjusting galleries with selector-jitsu. This is tough stuff inspired by @heydon's self correcting grids at http://codepen.io/heydon/pen/bcdrl. 
  // This is more complex since we're working with isolate. 
  
  @for $i from 1 through $cols {
    // last row of 4n+1
    .gallery__item:nth-child(#{$cols}n+1):nth-last-child(#{$i}) {
      @include span(isolate (susy-get(columns) / $i) first break);
      // Last row of 4n + 2, 4n + 3...
      @for $j from 2 through $cols - 1 {
        & ~ .gallery__item:nth-child(#{$cols}n+#{$j}) {
          @include span(isolate (susy-get(columns) / $i) at (12 / $i * ($j - 1) + 1) nobreak);
        }
      }
    }
  }
}

// Self Adjusting Galleries
// ------------------------
// Gallery reloaded takes in a Boolean as a third key in the second argument. If set to true, gallery-reloaded will produce self adjusting galleries (with a better loop compared to above).

.self-adjusting-galleries__item {
  @include gallery-reloaded(3, bottom self-adjusting-galleries__item true);
  margin-bottom: gutter();
  height: 0;
  padding-bottom: span(3);
}

// For Demo Purposes
// -----------------

@import "demo";

.gallery__item,
.self-adjusting-galleries__item {
  &:nth-child(odd) {
    background: color(shamrock);
  }
  &:nth-child(even) {
    background: color(jungle-green);
  }
}